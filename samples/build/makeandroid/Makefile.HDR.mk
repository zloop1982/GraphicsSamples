# Makefile generated by XPJ for android
-include Makefile.custom
ProjectName = HDR
HDR_cppfiles   += ./../../es3aep-kepler/HDR/BlurShaderGenerator.cpp
HDR_cppfiles   += ./../../es3aep-kepler/HDR/FileLoader.cpp
HDR_cppfiles   += ./../../es3aep-kepler/HDR/HDR.cpp
HDR_cppfiles   += ./../../es3aep-kepler/HDR/HDRImages.cpp
HDR_cppfiles   += ./../../es3aep-kepler/HDR/RenderTexture.cpp
HDR_cppfiles   += ./../../es3aep-kepler/HDR/rgbe.cpp
HDR_cppfiles   += ./../../es3aep-kepler/HDR/ShaderObject.cpp
HDR_cppfiles   += ./../../es3aep-kepler/HDR/VertexBufferObject.cpp

HDR_cpp_debug_dep    = $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(HDR_cppfiles)))))
HDR_cc_debug_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.debug.P, $(HDR_ccfiles)))))
HDR_c_debug_dep      = $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(HDR_cfiles)))))
HDR_debug_dep      = $(HDR_cpp_debug_dep) $(HDR_cc_debug_dep) $(HDR_c_debug_dep)
-include $(HDR_debug_dep)
HDR_cpp_release_dep    = $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(HDR_cppfiles)))))
HDR_cc_release_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.release.P, $(HDR_ccfiles)))))
HDR_c_release_dep      = $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(HDR_cfiles)))))
HDR_release_dep      = $(HDR_cpp_release_dep) $(HDR_cc_release_dep) $(HDR_c_release_dep)
-include $(HDR_release_dep)
HDR_debug_hpaths    := 
HDR_debug_hpaths    += ./../../es3aep-kepler/HDR
HDR_debug_hpaths    += ./../../../extensions/include
HDR_debug_hpaths    += ./../../../extensions/externals/include
HDR_debug_hpaths    += ./../../../extensions/include/NsFoundation
HDR_debug_hpaths    += ./../../../extensions/include/NvFoundation
HDR_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/platforms/android-24/arch-arm/usr/include
HDR_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include
HDR_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a/include
HDR_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include/backward
HDR_debug_lpaths    := 
HDR_debug_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
HDR_debug_lpaths    += ./../../../extensions/lib/Tegra-Android
HDR_debug_lpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a
HDR_debug_lpaths    += ./../../../extensions/lib/Tegra-Android
HDR_debug_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
HDR_debug_defines   := $(HDR_custom_defines)
HDR_debug_defines   += android
HDR_debug_defines   += ANDROID
HDR_debug_defines   += _LIB
HDR_debug_defines   += NV_ANDROID
HDR_debug_defines   += __STDC_LIMIT_MACROS
HDR_debug_defines   += GW_APP_NAME=\"HDR\"
HDR_debug_defines   += GL_API_LEVEL_ES3_1_AEP
HDR_debug_defines   += _DEBUG
HDR_debug_libraries := 
HDR_debug_libraries += NsFoundationD
HDR_debug_libraries += NvAppBaseD
HDR_debug_libraries += NvAssetLoaderD
HDR_debug_libraries += NvModelD
HDR_debug_libraries += NvGLUtilsD
HDR_debug_libraries += NvGamepadD
HDR_debug_libraries += NvImageD
HDR_debug_libraries += NvUID
HDR_debug_libraries += HalfD
HDR_debug_libraries += NvEGLUtilD
HDR_debug_libraries += gnustl_static
HDR_debug_libraries += EGL
HDR_debug_libraries += android
HDR_debug_libraries += m
HDR_debug_libraries += c
HDR_debug_libraries += supc++
HDR_debug_libraries += log
HDR_debug_libraries += gcc
HDR_debug_libraries += GLESv3
HDR_debug_common_cflags	:= $(HDR_custom_cflags)
HDR_debug_common_cflags    += -MMD
HDR_debug_common_cflags    += $(addprefix -D, $(HDR_debug_defines))
HDR_debug_common_cflags    += $(addprefix -I, $(HDR_debug_hpaths))
HDR_debug_common_cflags  += -fpic -fPIC -ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -fstrict-aliasing -funswitch-loops -finline-limit=300
HDR_debug_common_cflags  += -funwind-tables -O0 -g -ggdb -fno-omit-frame-pointer -Wno-attributes
HDR_debug_cflags	:= $(HDR_debug_common_cflags)
HDR_debug_cppflags	:= $(HDR_debug_common_cflags)
HDR_debug_cppflags  += -std="gnu++11"
HDR_debug_lflags    := $(HDR_custom_lflags)
HDR_debug_lflags    += $(addprefix -L, $(HDR_debug_lpaths))
HDR_debug_lflags    += -Wl,--start-group $(addprefix -l, $(HDR_debug_libraries)) -Wl,--end-group
HDR_debug_lflags  += --sysroot=$(NDKROOT)/platforms/android-24/arch-arm -shared -Wl,--no-undefined
HDR_debug_objsdir  = $(OBJS_DIR)/HDR_debug
HDR_debug_cpp_o    = $(addprefix $(HDR_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(HDR_cppfiles)))))
HDR_debug_cc_o    = $(addprefix $(HDR_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(HDR_ccfiles)))))
HDR_debug_c_o      = $(addprefix $(HDR_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(HDR_cfiles)))))
HDR_debug_obj      =  $(HDR_debug_cpp_o) $(HDR_debug_cc_o) $(HDR_debug_c_o) 
HDR_debug_bin      := ./../../es3aep-kepler/HDR/libs/armeabi-v7a/libHDR.so

clean_HDR_debug: 
	@$(ECHO) clean HDR debug
	@$(RMDIR) $(HDR_debug_objsdir)
	@$(RMDIR) $(HDR_debug_bin)
	@$(RMDIR) $(DEPSDIR)/HDR/debug

build_HDR_debug: postbuild_HDR_debug
postbuild_HDR_debug: mainbuild_HDR_debug preantbuild_HDR_debug antbuild_HDR_debug
preantbuild_HDR_debug: mainbuild_HDR_debug
antbuild_HDR_debug: preantbuild_HDR_debug
	dos2unix $(ANT_TOOL); JAVA_HOME=$(JAVA_HOME) $(ANT_TOOL) -f ./../../es3aep-kepler/HDR/build.xml debug
mainbuild_HDR_debug: prebuild_HDR_debug $(HDR_debug_bin)
prebuild_HDR_debug:

$(HDR_debug_bin): $(HDR_debug_obj) build_NsFoundation_debug build_NvAppBase_debug build_NvAssetLoader_debug build_NvModel_debug build_NvGLUtils_debug build_NvGamepad_debug build_NvImage_debug build_NvUI_debug build_Half_debug build_NvEGLUtil_debug 
	mkdir -p `dirname ./../../es3aep-kepler/HDR/libs/armeabi-v7a/libHDR.so`
	$(CXX) -shared $(filter %.o, $(HDR_debug_obj)) $(HDR_debug_lflags) -lc -o $@ 
	$(ECHO) building $@ complete!

HDR_debug_DEPDIR = $(dir $(@))/$(*F)
$(HDR_debug_cpp_o): $(HDR_debug_objsdir)/%.o:
	$(ECHO) HDR: compiling debug $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(HDR_debug_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cppfiles))))))
	cp $(HDR_debug_DEPDIR).d $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(HDR_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cppfiles))))).P; \
	  rm -f $(HDR_debug_DEPDIR).d

$(HDR_debug_cc_o): $(HDR_debug_objsdir)/%.o:
	$(ECHO) HDR: compiling debug $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(HDR_debug_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_ccfiles))))))
	cp $(HDR_debug_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_ccfiles))))).debug.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(HDR_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_ccfiles))))).debug.P; \
	  rm -f $(HDR_debug_DEPDIR).d

$(HDR_debug_c_o): $(HDR_debug_objsdir)/%.o:
	$(ECHO) HDR: compiling debug $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(HDR_debug_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cfiles))))))
	cp $(HDR_debug_DEPDIR).d $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(HDR_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/HDR/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_debug_objsdir),, $@))), $(HDR_cfiles))))).P; \
	  rm -f $(HDR_debug_DEPDIR).d

HDR_release_hpaths    := 
HDR_release_hpaths    += ./../../es3aep-kepler/HDR
HDR_release_hpaths    += ./../../../extensions/include
HDR_release_hpaths    += ./../../../extensions/externals/include
HDR_release_hpaths    += ./../../../extensions/include/NsFoundation
HDR_release_hpaths    += ./../../../extensions/include/NvFoundation
HDR_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/platforms/android-24/arch-arm/usr/include
HDR_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include
HDR_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a/include
HDR_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include/backward
HDR_release_lpaths    := 
HDR_release_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
HDR_release_lpaths    += ./../../../extensions/lib/Tegra-Android
HDR_release_lpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a
HDR_release_lpaths    += ./../../../extensions/lib/Tegra-Android
HDR_release_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
HDR_release_defines   := $(HDR_custom_defines)
HDR_release_defines   += android
HDR_release_defines   += ANDROID
HDR_release_defines   += _LIB
HDR_release_defines   += NV_ANDROID
HDR_release_defines   += __STDC_LIMIT_MACROS
HDR_release_defines   += GW_APP_NAME=\"HDR\"
HDR_release_defines   += GL_API_LEVEL_ES3_1_AEP
HDR_release_defines   += NDEBUG
HDR_release_libraries := 
HDR_release_libraries += NsFoundation
HDR_release_libraries += NvAppBase
HDR_release_libraries += NvAssetLoader
HDR_release_libraries += NvModel
HDR_release_libraries += NvGLUtils
HDR_release_libraries += NvGamepad
HDR_release_libraries += NvImage
HDR_release_libraries += NvUI
HDR_release_libraries += Half
HDR_release_libraries += NvEGLUtil
HDR_release_libraries += gnustl_static
HDR_release_libraries += EGL
HDR_release_libraries += android
HDR_release_libraries += m
HDR_release_libraries += c
HDR_release_libraries += supc++
HDR_release_libraries += log
HDR_release_libraries += gcc
HDR_release_libraries += GLESv3
HDR_release_common_cflags	:= $(HDR_custom_cflags)
HDR_release_common_cflags    += -MMD
HDR_release_common_cflags    += $(addprefix -D, $(HDR_release_defines))
HDR_release_common_cflags    += $(addprefix -I, $(HDR_release_hpaths))
HDR_release_common_cflags  += -fpic -fPIC -ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -fstrict-aliasing -funswitch-loops -finline-limit=300
HDR_release_common_cflags  += -funwind-tables -O2 -fno-omit-frame-pointer -Wno-attributes
HDR_release_cflags	:= $(HDR_release_common_cflags)
HDR_release_cppflags	:= $(HDR_release_common_cflags)
HDR_release_cppflags  += -std="gnu++11"
HDR_release_lflags    := $(HDR_custom_lflags)
HDR_release_lflags    += $(addprefix -L, $(HDR_release_lpaths))
HDR_release_lflags    += -Wl,--start-group $(addprefix -l, $(HDR_release_libraries)) -Wl,--end-group
HDR_release_lflags  += --sysroot=$(NDKROOT)/platforms/android-24/arch-arm -shared -Wl,--no-undefined
HDR_release_objsdir  = $(OBJS_DIR)/HDR_release
HDR_release_cpp_o    = $(addprefix $(HDR_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(HDR_cppfiles)))))
HDR_release_cc_o    = $(addprefix $(HDR_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(HDR_ccfiles)))))
HDR_release_c_o      = $(addprefix $(HDR_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(HDR_cfiles)))))
HDR_release_obj      =  $(HDR_release_cpp_o) $(HDR_release_cc_o) $(HDR_release_c_o) 
HDR_release_bin      := ./../../es3aep-kepler/HDR/libs/armeabi-v7a/libHDR.so

clean_HDR_release: 
	@$(ECHO) clean HDR release
	@$(RMDIR) $(HDR_release_objsdir)
	@$(RMDIR) $(HDR_release_bin)
	@$(RMDIR) $(DEPSDIR)/HDR/release

build_HDR_release: postbuild_HDR_release
postbuild_HDR_release: mainbuild_HDR_release preantbuild_HDR_release antbuild_HDR_release
preantbuild_HDR_release: mainbuild_HDR_release
antbuild_HDR_release: preantbuild_HDR_release
	dos2unix $(ANT_TOOL); JAVA_HOME=$(JAVA_HOME) $(ANT_TOOL) -f ./../../es3aep-kepler/HDR/build.xml debug
mainbuild_HDR_release: prebuild_HDR_release $(HDR_release_bin)
prebuild_HDR_release:

$(HDR_release_bin): $(HDR_release_obj) build_NsFoundation_release build_NvAppBase_release build_NvAssetLoader_release build_NvModel_release build_NvGLUtils_release build_NvGamepad_release build_NvImage_release build_NvUI_release build_Half_release build_NvEGLUtil_release 
	mkdir -p `dirname ./../../es3aep-kepler/HDR/libs/armeabi-v7a/libHDR.so`
	$(CXX) -shared $(filter %.o, $(HDR_release_obj)) $(HDR_release_lflags) -lc -o $@ 
	$(ECHO) building $@ complete!

HDR_release_DEPDIR = $(dir $(@))/$(*F)
$(HDR_release_cpp_o): $(HDR_release_objsdir)/%.o:
	$(ECHO) HDR: compiling release $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(HDR_release_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cppfiles))))))
	cp $(HDR_release_DEPDIR).d $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(HDR_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cppfiles))))).P; \
	  rm -f $(HDR_release_DEPDIR).d

$(HDR_release_cc_o): $(HDR_release_objsdir)/%.o:
	$(ECHO) HDR: compiling release $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_release_objsdir),, $@))), $(HDR_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(HDR_release_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_release_objsdir),, $@))), $(HDR_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_release_objsdir),, $@))), $(HDR_ccfiles))))))
	cp $(HDR_release_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_release_objsdir),, $@))), $(HDR_ccfiles))))).release.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(HDR_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(HDR_release_objsdir),, $@))), $(HDR_ccfiles))))).release.P; \
	  rm -f $(HDR_release_DEPDIR).d

$(HDR_release_c_o): $(HDR_release_objsdir)/%.o:
	$(ECHO) HDR: compiling release $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(HDR_release_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cfiles))))))
	cp $(HDR_release_DEPDIR).d $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(HDR_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/HDR/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(HDR_release_objsdir),, $@))), $(HDR_cfiles))))).P; \
	  rm -f $(HDR_release_DEPDIR).d

clean_HDR:  clean_HDR_debug clean_HDR_release
	rm -rf $(DEPSDIR)

export VERBOSE
ifndef VERBOSE
.SILENT:
endif
