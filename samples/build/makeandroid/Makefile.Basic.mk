# Makefile generated by XPJ for android
-include Makefile.custom
ProjectName = Basic
Basic_cppfiles   += ./../../tutorial/Basic/Basic.cpp

Basic_cpp_debug_dep    = $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(Basic_cppfiles)))))
Basic_cc_debug_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.debug.P, $(Basic_ccfiles)))))
Basic_c_debug_dep      = $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(Basic_cfiles)))))
Basic_debug_dep      = $(Basic_cpp_debug_dep) $(Basic_cc_debug_dep) $(Basic_c_debug_dep)
-include $(Basic_debug_dep)
Basic_cpp_release_dep    = $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(Basic_cppfiles)))))
Basic_cc_release_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.release.P, $(Basic_ccfiles)))))
Basic_c_release_dep      = $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(Basic_cfiles)))))
Basic_release_dep      = $(Basic_cpp_release_dep) $(Basic_cc_release_dep) $(Basic_c_release_dep)
-include $(Basic_release_dep)
Basic_debug_hpaths    := 
Basic_debug_hpaths    += ./../../tutorial/Basic
Basic_debug_hpaths    += ./../../../extensions/include
Basic_debug_hpaths    += ./../../../extensions/externals/include
Basic_debug_hpaths    += ./../../../extensions/include/NsFoundation
Basic_debug_hpaths    += ./../../../extensions/include/NvFoundation
Basic_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/platforms/android-24/arch-arm/usr/include
Basic_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include
Basic_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a/include
Basic_debug_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include/backward
Basic_debug_lpaths    := 
Basic_debug_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
Basic_debug_lpaths    += ./../../../extensions/lib/Tegra-Android
Basic_debug_lpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a
Basic_debug_lpaths    += ./../../../extensions/lib/Tegra-Android
Basic_debug_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
Basic_debug_defines   := $(Basic_custom_defines)
Basic_debug_defines   += android
Basic_debug_defines   += ANDROID
Basic_debug_defines   += _LIB
Basic_debug_defines   += NV_ANDROID
Basic_debug_defines   += __STDC_LIMIT_MACROS
Basic_debug_defines   += GW_APP_NAME=\"Basic\"
Basic_debug_defines   += GL_API_LEVEL_ES2
Basic_debug_defines   += _DEBUG
Basic_debug_libraries := 
Basic_debug_libraries += NsFoundationD
Basic_debug_libraries += NvAppBaseD
Basic_debug_libraries += NvAssetLoaderD
Basic_debug_libraries += NvModelD
Basic_debug_libraries += NvGLUtilsD
Basic_debug_libraries += NvGamepadD
Basic_debug_libraries += NvImageD
Basic_debug_libraries += NvUID
Basic_debug_libraries += HalfD
Basic_debug_libraries += NvEGLUtilD
Basic_debug_libraries += gnustl_static
Basic_debug_libraries += EGL
Basic_debug_libraries += android
Basic_debug_libraries += m
Basic_debug_libraries += c
Basic_debug_libraries += supc++
Basic_debug_libraries += log
Basic_debug_libraries += gcc
Basic_debug_libraries += GLESv2
Basic_debug_common_cflags	:= $(Basic_custom_cflags)
Basic_debug_common_cflags    += -MMD
Basic_debug_common_cflags    += $(addprefix -D, $(Basic_debug_defines))
Basic_debug_common_cflags    += $(addprefix -I, $(Basic_debug_hpaths))
Basic_debug_common_cflags  += -fpic -fPIC -ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -fstrict-aliasing -funswitch-loops -finline-limit=300
Basic_debug_common_cflags  += -funwind-tables -O0 -g -ggdb -fno-omit-frame-pointer -Wno-attributes
Basic_debug_cflags	:= $(Basic_debug_common_cflags)
Basic_debug_cppflags	:= $(Basic_debug_common_cflags)
Basic_debug_cppflags  += -std="gnu++11"
Basic_debug_lflags    := $(Basic_custom_lflags)
Basic_debug_lflags    += $(addprefix -L, $(Basic_debug_lpaths))
Basic_debug_lflags    += -Wl,--start-group $(addprefix -l, $(Basic_debug_libraries)) -Wl,--end-group
Basic_debug_lflags  += --sysroot=$(NDKROOT)/platforms/android-24/arch-arm -shared -Wl,--no-undefined
Basic_debug_objsdir  = $(OBJS_DIR)/Basic_debug
Basic_debug_cpp_o    = $(addprefix $(Basic_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(Basic_cppfiles)))))
Basic_debug_cc_o    = $(addprefix $(Basic_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(Basic_ccfiles)))))
Basic_debug_c_o      = $(addprefix $(Basic_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(Basic_cfiles)))))
Basic_debug_obj      =  $(Basic_debug_cpp_o) $(Basic_debug_cc_o) $(Basic_debug_c_o) 
Basic_debug_bin      := ./../../tutorial/Basic/libs/armeabi-v7a/libBasic.so

clean_Basic_debug: 
	@$(ECHO) clean Basic debug
	@$(RMDIR) $(Basic_debug_objsdir)
	@$(RMDIR) $(Basic_debug_bin)
	@$(RMDIR) $(DEPSDIR)/Basic/debug

build_Basic_debug: postbuild_Basic_debug
postbuild_Basic_debug: mainbuild_Basic_debug preantbuild_Basic_debug antbuild_Basic_debug
preantbuild_Basic_debug: mainbuild_Basic_debug
antbuild_Basic_debug: preantbuild_Basic_debug
	dos2unix $(ANT_TOOL); JAVA_HOME=$(JAVA_HOME) $(ANT_TOOL) -f ./../../tutorial/Basic/build.xml debug
mainbuild_Basic_debug: prebuild_Basic_debug $(Basic_debug_bin)
prebuild_Basic_debug:

$(Basic_debug_bin): $(Basic_debug_obj) build_NsFoundation_debug build_NvAppBase_debug build_NvAssetLoader_debug build_NvModel_debug build_NvGLUtils_debug build_NvGamepad_debug build_NvImage_debug build_NvUI_debug build_Half_debug build_NvEGLUtil_debug 
	mkdir -p `dirname ./../../tutorial/Basic/libs/armeabi-v7a/libBasic.so`
	$(CXX) -shared $(filter %.o, $(Basic_debug_obj)) $(Basic_debug_lflags) -lc -o $@ 
	$(ECHO) building $@ complete!

Basic_debug_DEPDIR = $(dir $(@))/$(*F)
$(Basic_debug_cpp_o): $(Basic_debug_objsdir)/%.o:
	$(ECHO) Basic: compiling debug $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(Basic_debug_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cppfiles))))))
	cp $(Basic_debug_DEPDIR).d $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(Basic_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cppfiles))))).P; \
	  rm -f $(Basic_debug_DEPDIR).d

$(Basic_debug_cc_o): $(Basic_debug_objsdir)/%.o:
	$(ECHO) Basic: compiling debug $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(Basic_debug_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_ccfiles))))))
	cp $(Basic_debug_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_ccfiles))))).debug.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(Basic_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_ccfiles))))).debug.P; \
	  rm -f $(Basic_debug_DEPDIR).d

$(Basic_debug_c_o): $(Basic_debug_objsdir)/%.o:
	$(ECHO) Basic: compiling debug $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(Basic_debug_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cfiles))))))
	cp $(Basic_debug_DEPDIR).d $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(Basic_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/Basic/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_debug_objsdir),, $@))), $(Basic_cfiles))))).P; \
	  rm -f $(Basic_debug_DEPDIR).d

Basic_release_hpaths    := 
Basic_release_hpaths    += ./../../tutorial/Basic
Basic_release_hpaths    += ./../../../extensions/include
Basic_release_hpaths    += ./../../../extensions/externals/include
Basic_release_hpaths    += ./../../../extensions/include/NsFoundation
Basic_release_hpaths    += ./../../../extensions/include/NvFoundation
Basic_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/platforms/android-24/arch-arm/usr/include
Basic_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include
Basic_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a/include
Basic_release_hpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/include/backward
Basic_release_lpaths    := 
Basic_release_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
Basic_release_lpaths    += ./../../../extensions/lib/Tegra-Android
Basic_release_lpaths    += $(if $(NVPACK_ROOT),$(NVPACK_ROOT),$(error the environment must define NVPACK_ROOT))/$(if $(NVPACK_NDK_VERSION),$(NVPACK_NDK_VERSION),android-ndk-r9d)/sources/cxx-stl/gnu-libstdc++/$(if $(NVPACK_NDK_TOOL_VERSION),$(NVPACK_NDK_TOOL_VERSION),4.8)/libs/armeabi-v7a
Basic_release_lpaths    += ./../../../extensions/lib/Tegra-Android
Basic_release_lpaths    += ./../../../extensions/externals/lib/Tegra-Android
Basic_release_defines   := $(Basic_custom_defines)
Basic_release_defines   += android
Basic_release_defines   += ANDROID
Basic_release_defines   += _LIB
Basic_release_defines   += NV_ANDROID
Basic_release_defines   += __STDC_LIMIT_MACROS
Basic_release_defines   += GW_APP_NAME=\"Basic\"
Basic_release_defines   += GL_API_LEVEL_ES2
Basic_release_defines   += NDEBUG
Basic_release_libraries := 
Basic_release_libraries += NsFoundation
Basic_release_libraries += NvAppBase
Basic_release_libraries += NvAssetLoader
Basic_release_libraries += NvModel
Basic_release_libraries += NvGLUtils
Basic_release_libraries += NvGamepad
Basic_release_libraries += NvImage
Basic_release_libraries += NvUI
Basic_release_libraries += Half
Basic_release_libraries += NvEGLUtil
Basic_release_libraries += gnustl_static
Basic_release_libraries += EGL
Basic_release_libraries += android
Basic_release_libraries += m
Basic_release_libraries += c
Basic_release_libraries += supc++
Basic_release_libraries += log
Basic_release_libraries += gcc
Basic_release_libraries += GLESv2
Basic_release_common_cflags	:= $(Basic_custom_cflags)
Basic_release_common_cflags    += -MMD
Basic_release_common_cflags    += $(addprefix -D, $(Basic_release_defines))
Basic_release_common_cflags    += $(addprefix -I, $(Basic_release_hpaths))
Basic_release_common_cflags  += -fpic -fPIC -ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -fstrict-aliasing -funswitch-loops -finline-limit=300
Basic_release_common_cflags  += -funwind-tables -O2 -fno-omit-frame-pointer -Wno-attributes
Basic_release_cflags	:= $(Basic_release_common_cflags)
Basic_release_cppflags	:= $(Basic_release_common_cflags)
Basic_release_cppflags  += -std="gnu++11"
Basic_release_lflags    := $(Basic_custom_lflags)
Basic_release_lflags    += $(addprefix -L, $(Basic_release_lpaths))
Basic_release_lflags    += -Wl,--start-group $(addprefix -l, $(Basic_release_libraries)) -Wl,--end-group
Basic_release_lflags  += --sysroot=$(NDKROOT)/platforms/android-24/arch-arm -shared -Wl,--no-undefined
Basic_release_objsdir  = $(OBJS_DIR)/Basic_release
Basic_release_cpp_o    = $(addprefix $(Basic_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(Basic_cppfiles)))))
Basic_release_cc_o    = $(addprefix $(Basic_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(Basic_ccfiles)))))
Basic_release_c_o      = $(addprefix $(Basic_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(Basic_cfiles)))))
Basic_release_obj      =  $(Basic_release_cpp_o) $(Basic_release_cc_o) $(Basic_release_c_o) 
Basic_release_bin      := ./../../tutorial/Basic/libs/armeabi-v7a/libBasic.so

clean_Basic_release: 
	@$(ECHO) clean Basic release
	@$(RMDIR) $(Basic_release_objsdir)
	@$(RMDIR) $(Basic_release_bin)
	@$(RMDIR) $(DEPSDIR)/Basic/release

build_Basic_release: postbuild_Basic_release
postbuild_Basic_release: mainbuild_Basic_release preantbuild_Basic_release antbuild_Basic_release
preantbuild_Basic_release: mainbuild_Basic_release
antbuild_Basic_release: preantbuild_Basic_release
	dos2unix $(ANT_TOOL); JAVA_HOME=$(JAVA_HOME) $(ANT_TOOL) -f ./../../tutorial/Basic/build.xml debug
mainbuild_Basic_release: prebuild_Basic_release $(Basic_release_bin)
prebuild_Basic_release:

$(Basic_release_bin): $(Basic_release_obj) build_NsFoundation_release build_NvAppBase_release build_NvAssetLoader_release build_NvModel_release build_NvGLUtils_release build_NvGamepad_release build_NvImage_release build_NvUI_release build_Half_release build_NvEGLUtil_release 
	mkdir -p `dirname ./../../tutorial/Basic/libs/armeabi-v7a/libBasic.so`
	$(CXX) -shared $(filter %.o, $(Basic_release_obj)) $(Basic_release_lflags) -lc -o $@ 
	$(ECHO) building $@ complete!

Basic_release_DEPDIR = $(dir $(@))/$(*F)
$(Basic_release_cpp_o): $(Basic_release_objsdir)/%.o:
	$(ECHO) Basic: compiling release $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(Basic_release_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cppfiles))))))
	cp $(Basic_release_DEPDIR).d $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(Basic_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cppfiles))))).P; \
	  rm -f $(Basic_release_DEPDIR).d

$(Basic_release_cc_o): $(Basic_release_objsdir)/%.o:
	$(ECHO) Basic: compiling release $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_release_objsdir),, $@))), $(Basic_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(Basic_release_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_release_objsdir),, $@))), $(Basic_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_release_objsdir),, $@))), $(Basic_ccfiles))))))
	cp $(Basic_release_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_release_objsdir),, $@))), $(Basic_ccfiles))))).release.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(Basic_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(Basic_release_objsdir),, $@))), $(Basic_ccfiles))))).release.P; \
	  rm -f $(Basic_release_DEPDIR).d

$(Basic_release_c_o): $(Basic_release_objsdir)/%.o:
	$(ECHO) Basic: compiling release $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(Basic_release_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cfiles))))))
	cp $(Basic_release_DEPDIR).d $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(Basic_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/Basic/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(Basic_release_objsdir),, $@))), $(Basic_cfiles))))).P; \
	  rm -f $(Basic_release_DEPDIR).d

clean_Basic:  clean_Basic_debug clean_Basic_release
	rm -rf $(DEPSDIR)

export VERBOSE
ifndef VERBOSE
.SILENT:
endif
