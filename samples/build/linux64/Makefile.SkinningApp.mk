# Makefile generated by XPJ for linux64
-include Makefile.custom
ProjectName = SkinningApp
SkinningApp_cppfiles   += ./../../es2-aurora/SkinningApp/SkinnedMesh.cpp
SkinningApp_cppfiles   += ./../../es2-aurora/SkinningApp/SkinningApp.cpp

SkinningApp_cpp_debug_dep    = $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(SkinningApp_cppfiles)))))
SkinningApp_cc_debug_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.debug.P, $(SkinningApp_ccfiles)))))
SkinningApp_c_debug_dep      = $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(SkinningApp_cfiles)))))
SkinningApp_debug_dep      = $(SkinningApp_cpp_debug_dep) $(SkinningApp_cc_debug_dep) $(SkinningApp_c_debug_dep)
-include $(SkinningApp_debug_dep)
SkinningApp_cpp_release_dep    = $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(SkinningApp_cppfiles)))))
SkinningApp_cc_release_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.release.P, $(SkinningApp_ccfiles)))))
SkinningApp_c_release_dep      = $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(SkinningApp_cfiles)))))
SkinningApp_release_dep      = $(SkinningApp_cpp_release_dep) $(SkinningApp_cc_release_dep) $(SkinningApp_c_release_dep)
-include $(SkinningApp_release_dep)
SkinningApp_debug_hpaths    := 
SkinningApp_debug_hpaths    += ./../../es2-aurora/SkinningApp
SkinningApp_debug_hpaths    += ./../../../extensions/include
SkinningApp_debug_hpaths    += ./../../../extensions/include/NsFoundation
SkinningApp_debug_hpaths    += ./../../../extensions/include/NvFoundation
SkinningApp_debug_hpaths    += ./../../../extensions/externals/include
SkinningApp_debug_hpaths    += ./../../../extensions/externals/include/GLFW
SkinningApp_debug_lpaths    := 
SkinningApp_debug_lpaths    += ./../../../extensions/lib/linux64
SkinningApp_debug_lpaths    += ./../../../extensions/externals/lib/linux64
SkinningApp_debug_defines   := $(SkinningApp_custom_defines)
SkinningApp_debug_defines   += LINUX=1
SkinningApp_debug_defines   += NV_LINUX
SkinningApp_debug_defines   += GW_APP_NAME=\"SkinningApp\"
SkinningApp_debug_defines   += _DEBUG
SkinningApp_debug_libraries := 
SkinningApp_debug_libraries += NsFoundationD
SkinningApp_debug_libraries += NvAppBaseD
SkinningApp_debug_libraries += NvAssetLoaderD
SkinningApp_debug_libraries += NvModelD
SkinningApp_debug_libraries += NvGLUtilsD
SkinningApp_debug_libraries += NvGamepadD
SkinningApp_debug_libraries += NvImageD
SkinningApp_debug_libraries += NvUID
SkinningApp_debug_libraries += HalfD
SkinningApp_debug_libraries += glfw3
SkinningApp_debug_libraries += GLEW
SkinningApp_debug_libraries += GL
SkinningApp_debug_libraries += X11
SkinningApp_debug_libraries += Xrandr
SkinningApp_debug_libraries += Xxf86vm
SkinningApp_debug_libraries += Xi
SkinningApp_debug_libraries += Xinerama
SkinningApp_debug_libraries += Xcursor
SkinningApp_debug_libraries += dl
SkinningApp_debug_common_cflags	:= $(SkinningApp_custom_cflags)
SkinningApp_debug_common_cflags    += -MMD
SkinningApp_debug_common_cflags    += $(addprefix -D, $(SkinningApp_debug_defines))
SkinningApp_debug_common_cflags    += $(addprefix -I, $(SkinningApp_debug_hpaths))
SkinningApp_debug_common_cflags  += -m64
SkinningApp_debug_common_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function -malign-double
SkinningApp_debug_common_cflags  += -m64 -pthread
SkinningApp_debug_common_cflags  += -funwind-tables -O0 -g -ggdb -fno-omit-frame-pointer
SkinningApp_debug_cflags	:= $(SkinningApp_debug_common_cflags)
SkinningApp_debug_cppflags	:= $(SkinningApp_debug_common_cflags)
SkinningApp_debug_cppflags  += -Wno-reorder -std=c++11
SkinningApp_debug_lflags    := $(SkinningApp_custom_lflags)
SkinningApp_debug_lflags    += $(addprefix -L, $(SkinningApp_debug_lpaths))
SkinningApp_debug_lflags    += -Wl,--start-group $(addprefix -l, $(SkinningApp_debug_libraries)) -Wl,--end-group
SkinningApp_debug_lflags  += -Wl,--unresolved-symbols=ignore-in-shared-libs
SkinningApp_debug_lflags  += -m64 -pthread
SkinningApp_debug_lflags  += -m64
SkinningApp_debug_objsdir  = $(OBJS_DIR)/SkinningApp_debug
SkinningApp_debug_cpp_o    = $(addprefix $(SkinningApp_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(SkinningApp_cppfiles)))))
SkinningApp_debug_cc_o    = $(addprefix $(SkinningApp_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(SkinningApp_ccfiles)))))
SkinningApp_debug_c_o      = $(addprefix $(SkinningApp_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(SkinningApp_cfiles)))))
SkinningApp_debug_obj      =  $(SkinningApp_debug_cpp_o) $(SkinningApp_debug_cc_o) $(SkinningApp_debug_c_o) 
SkinningApp_debug_bin      := ./../../bin/linux64/SkinningAppD

clean_SkinningApp_debug: 
	@$(ECHO) clean SkinningApp debug
	@$(RMDIR) $(SkinningApp_debug_objsdir)
	@$(RMDIR) $(SkinningApp_debug_bin)
	@$(RMDIR) $(DEPSDIR)/SkinningApp/debug

build_SkinningApp_debug: postbuild_SkinningApp_debug
postbuild_SkinningApp_debug: mainbuild_SkinningApp_debug
mainbuild_SkinningApp_debug: prebuild_SkinningApp_debug $(SkinningApp_debug_bin)
prebuild_SkinningApp_debug:

$(SkinningApp_debug_bin): $(SkinningApp_debug_obj) build_NsFoundation_debug build_NvAppBase_debug build_NvAssetLoader_debug build_NvModel_debug build_NvGLUtils_debug build_NvGamepad_debug build_NvImage_debug build_NvUI_debug build_Half_debug 
	mkdir -p `dirname ./../../bin/linux64/SkinningAppD`
	$(CCLD) $(filter %.o, $(SkinningApp_debug_obj)) $(SkinningApp_debug_lflags) -o $(SkinningApp_debug_bin) 
	$(ECHO) building $@ complete!

SkinningApp_debug_DEPDIR = $(dir $(@))/$(*F)
$(SkinningApp_debug_cpp_o): $(SkinningApp_debug_objsdir)/%.o:
	$(ECHO) SkinningApp: compiling debug $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(SkinningApp_debug_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cppfiles))))))
	cp $(SkinningApp_debug_DEPDIR).d $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(SkinningApp_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cppfiles))))).P; \
	  rm -f $(SkinningApp_debug_DEPDIR).d

$(SkinningApp_debug_cc_o): $(SkinningApp_debug_objsdir)/%.o:
	$(ECHO) SkinningApp: compiling debug $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(SkinningApp_debug_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_ccfiles))))))
	cp $(SkinningApp_debug_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_ccfiles))))).debug.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(SkinningApp_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_ccfiles))))).debug.P; \
	  rm -f $(SkinningApp_debug_DEPDIR).d

$(SkinningApp_debug_c_o): $(SkinningApp_debug_objsdir)/%.o:
	$(ECHO) SkinningApp: compiling debug $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(SkinningApp_debug_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cfiles))))))
	cp $(SkinningApp_debug_DEPDIR).d $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(SkinningApp_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/SkinningApp/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_debug_objsdir),, $@))), $(SkinningApp_cfiles))))).P; \
	  rm -f $(SkinningApp_debug_DEPDIR).d

SkinningApp_release_hpaths    := 
SkinningApp_release_hpaths    += ./../../es2-aurora/SkinningApp
SkinningApp_release_hpaths    += ./../../../extensions/include
SkinningApp_release_hpaths    += ./../../../extensions/include/NsFoundation
SkinningApp_release_hpaths    += ./../../../extensions/include/NvFoundation
SkinningApp_release_hpaths    += ./../../../extensions/externals/include
SkinningApp_release_hpaths    += ./../../../extensions/externals/include/GLFW
SkinningApp_release_lpaths    := 
SkinningApp_release_lpaths    += ./../../../extensions/lib/linux64
SkinningApp_release_lpaths    += ./../../../extensions/externals/lib/linux64
SkinningApp_release_defines   := $(SkinningApp_custom_defines)
SkinningApp_release_defines   += LINUX=1
SkinningApp_release_defines   += NV_LINUX
SkinningApp_release_defines   += GW_APP_NAME=\"SkinningApp\"
SkinningApp_release_defines   += NDEBUG
SkinningApp_release_libraries := 
SkinningApp_release_libraries += NsFoundation
SkinningApp_release_libraries += NvAppBase
SkinningApp_release_libraries += NvAssetLoader
SkinningApp_release_libraries += NvModel
SkinningApp_release_libraries += NvGLUtils
SkinningApp_release_libraries += NvGamepad
SkinningApp_release_libraries += NvImage
SkinningApp_release_libraries += NvUI
SkinningApp_release_libraries += Half
SkinningApp_release_libraries += glfw3
SkinningApp_release_libraries += GLEW
SkinningApp_release_libraries += GL
SkinningApp_release_libraries += X11
SkinningApp_release_libraries += Xrandr
SkinningApp_release_libraries += Xxf86vm
SkinningApp_release_libraries += Xi
SkinningApp_release_libraries += Xinerama
SkinningApp_release_libraries += Xcursor
SkinningApp_release_libraries += dl
SkinningApp_release_common_cflags	:= $(SkinningApp_custom_cflags)
SkinningApp_release_common_cflags    += -MMD
SkinningApp_release_common_cflags    += $(addprefix -D, $(SkinningApp_release_defines))
SkinningApp_release_common_cflags    += $(addprefix -I, $(SkinningApp_release_hpaths))
SkinningApp_release_common_cflags  += -m64
SkinningApp_release_common_cflags  += -funwind-tables -Wall -Wextra -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-unused-but-set-variable -Wno-switch -Wno-unused-variable -Wno-unused-function -malign-double
SkinningApp_release_common_cflags  += -m64 -pthread
SkinningApp_release_common_cflags  += -funwind-tables -O2 -fno-omit-frame-pointer
SkinningApp_release_cflags	:= $(SkinningApp_release_common_cflags)
SkinningApp_release_cppflags	:= $(SkinningApp_release_common_cflags)
SkinningApp_release_cppflags  += -Wno-reorder -std=c++11
SkinningApp_release_lflags    := $(SkinningApp_custom_lflags)
SkinningApp_release_lflags    += $(addprefix -L, $(SkinningApp_release_lpaths))
SkinningApp_release_lflags    += -Wl,--start-group $(addprefix -l, $(SkinningApp_release_libraries)) -Wl,--end-group
SkinningApp_release_lflags  += -Wl,--unresolved-symbols=ignore-in-shared-libs
SkinningApp_release_lflags  += -m64 -pthread
SkinningApp_release_lflags  += -m64
SkinningApp_release_objsdir  = $(OBJS_DIR)/SkinningApp_release
SkinningApp_release_cpp_o    = $(addprefix $(SkinningApp_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(SkinningApp_cppfiles)))))
SkinningApp_release_cc_o    = $(addprefix $(SkinningApp_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(SkinningApp_ccfiles)))))
SkinningApp_release_c_o      = $(addprefix $(SkinningApp_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(SkinningApp_cfiles)))))
SkinningApp_release_obj      =  $(SkinningApp_release_cpp_o) $(SkinningApp_release_cc_o) $(SkinningApp_release_c_o) 
SkinningApp_release_bin      := ./../../bin/linux64/SkinningApp

clean_SkinningApp_release: 
	@$(ECHO) clean SkinningApp release
	@$(RMDIR) $(SkinningApp_release_objsdir)
	@$(RMDIR) $(SkinningApp_release_bin)
	@$(RMDIR) $(DEPSDIR)/SkinningApp/release

build_SkinningApp_release: postbuild_SkinningApp_release
postbuild_SkinningApp_release: mainbuild_SkinningApp_release
mainbuild_SkinningApp_release: prebuild_SkinningApp_release $(SkinningApp_release_bin)
prebuild_SkinningApp_release:

$(SkinningApp_release_bin): $(SkinningApp_release_obj) build_NsFoundation_release build_NvAppBase_release build_NvAssetLoader_release build_NvModel_release build_NvGLUtils_release build_NvGamepad_release build_NvImage_release build_NvUI_release build_Half_release 
	mkdir -p `dirname ./../../bin/linux64/SkinningApp`
	$(CCLD) $(filter %.o, $(SkinningApp_release_obj)) $(SkinningApp_release_lflags) -o $(SkinningApp_release_bin) 
	$(ECHO) building $@ complete!

SkinningApp_release_DEPDIR = $(dir $(@))/$(*F)
$(SkinningApp_release_cpp_o): $(SkinningApp_release_objsdir)/%.o:
	$(ECHO) SkinningApp: compiling release $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(SkinningApp_release_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cppfiles))))))
	cp $(SkinningApp_release_DEPDIR).d $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(SkinningApp_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cppfiles))))).P; \
	  rm -f $(SkinningApp_release_DEPDIR).d

$(SkinningApp_release_cc_o): $(SkinningApp_release_objsdir)/%.o:
	$(ECHO) SkinningApp: compiling release $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(SkinningApp_release_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_ccfiles))))))
	cp $(SkinningApp_release_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_ccfiles))))).release.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(SkinningApp_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_ccfiles))))).release.P; \
	  rm -f $(SkinningApp_release_DEPDIR).d

$(SkinningApp_release_c_o): $(SkinningApp_release_objsdir)/%.o:
	$(ECHO) SkinningApp: compiling release $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(SkinningApp_release_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cfiles))))))
	cp $(SkinningApp_release_DEPDIR).d $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(SkinningApp_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/SkinningApp/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(SkinningApp_release_objsdir),, $@))), $(SkinningApp_cfiles))))).P; \
	  rm -f $(SkinningApp_release_DEPDIR).d

clean_SkinningApp:  clean_SkinningApp_debug clean_SkinningApp_release
	rm -rf $(DEPSDIR)

export VERBOSE
ifndef VERBOSE
.SILENT:
endif
