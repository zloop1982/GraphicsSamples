<!doctype html>
<html class="csstransforms csstransforms3d csstransitions" lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta charset="utf-8" />
	
	<title>NVIDIA GameWorks Graphics Samples Setup Guide</title>
	<meta name="description" content="NVIDIA GameWorks Graphics Samples Setup Guide" />

	<!-- CSS files -->
    <link href="./css/application.css" rel="stylesheet" type="text/css" />
    <link href="./css/styleguide.css" rel="stylesheet" type="text/css" />
	<!--<link rel="stylesheet" type="text/css" href="sdk_samples.css" />-->
	<!-- scripts to include -->
    <script src="./js/jquery.js"></script>
    <script src="./js/owl.carousel.js"></script>
    <script src="./js/jquery.fitvids.js"></script>
    <script src="./js/jquery.colorbox.js"></script>
    <script src="./js/jquery.isotope.js"></script>
    <script src="./js/jquery.sidr.js"></script>
    <script src="./js/bootstrap.js"></script>
    <script src="./js/application.js"></script>
    <script src="./js/prettify.js"></script>
</head>

<body style="">

<!--Navbar-->
<nav class="navbar navbar-inverse navbar-static-top" role="navigation">
  <div class="container">
	<div class="row">
	  <!--<button class="navbar-toggle" type="button"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button>-->
	  <div class="logo-header col-sm-8 col-md-9">
		<a class="navbar-brand logo" href="http://developer.nvidia.com/gameworks"><img alt="NVidia GameWorks" height="21" src="./images/developerzone_gameworks_logo.png" width="245"></a>
	  </div>
	  <div class="logo-header navbar-right col-sm-4 col-md-3">
		<a class="navbar-brand logo" href="https://github.com/NVIDIAGameWorks/GraphicsSamples"><img src="./images/gameworks_at_github.png" alt="GameWorks at GitHub" height="21" width="226"/></a>
	  </div>
	</div>
  </div>
</nav>

<!-- main body block -->
<div id="content" class="container">

<div class="row">
 <div class="col-xs-12">
    <ol class="breadcrumb"><br/><li><a href="./index.html">Home</a></li><li class="active">NVIDIA GameWorks Graphics Samples Setup Guide</li></ol> 
	<div class="page-header">
		<h1>NVIDIA GameWorks Graphics Samples Setup Guide</h1>
	</div>
	<p class="lead">This guide will help you with the setup of your host machine in order to properly build and run the the NVIDIA GameWorks Graphics sample applications for Vulkan and OpenGL.</p>
	<p>Please ensure your system meets the <a href="gfx_prereq.htm">Graphics Samples Prerequisites</a> before proceeding further.</p>
	
	<h2>Installing and Building on Windows Host</h2>
	<p>This section will walk you through the setup of the Vulkan and OpenGL samples on a Windows development PC, for Android and Windows build targets.</p>

	<h3>Targeting Windows PC</h3>
	<ol>
		<li>Unzip the samples pack to a directory on the Windows Host PC.  We will call this directory <code>SAMPLES_ROOT</code>.</li>
		<li>If you haven't already done so, download and install the <a href="https://lunarg.com/vulkan-sdk/">LunarG Vulkan SDK</a>.  Ensure that the installer has set <code>VK_SDK_PATH</code> to the path to the SDK, and restart any Visual Studio instances. See the <a href="gfx_prereq.htm">Prerequisites</a> guide for recommended min SDK version.</li>
		<li>Launch Visual Studio 2013 or 2015.</li>
		<li>Open the all-samples project file: <code>{SAMPLES_ROOT}/samples/build/vs201[3,5]All/AllSamples.sln</code>.</li>
		<li>Build the solution as release or debug.</li>
		<li>The resulting apps will be placed in <code>{SAMPLES_ROOT}/samples/bin/vs201[3,5][x86,x64]/</code>.</li>
	</ol>
	<h3>Targeting Android Device</h3>
	<ol>
		<li>Unzip the samples pack to a directory on the Windows Host PC.  We will call this directory <code>SAMPLES_ROOT</code>.</li>
		<li>If you haven't already done so, download and install the <a href="https://developer.nvidia.com/codeworks-android">CodeWorks for Android</a> installer for Windows.  Be sure to include NVIDIA Nsight Tegra, Visual Studio Edition as an installed component.</li>
		<li>If you haven't already done so, download and install the <a href="https://lunarg.com/vulkan-sdk/">LunarG Vulkan SDK</a>.  Ensure that the installer has set <code>VK_SDK_PATH</code> to the path to the SDK, and restart any Visual Studio instances. See the <a href="gfx_prereq.htm">Prerequisites</a> guide for recommended min SDK version.</li>
		<li>Launch Visual Studio 2013 or 2015.</li>
		<li>Open the all-samples project file: <code>{SAMPLES_ROOT}/samples/build/vs201[3,5]All/AllSamples.sln</code>.</li>
		<li>Build the solution as release or debug.</li>
		<li>The resulting app APKs will be placed in <code>{SAMPLES_ROOT}/samples/bin/Tegra-Android/</code>.</li>
	</ol>
	<h5>Common Android Build Errors</h5>
	<ul>
		<li><p>An error similar to:</p>
			<div class="alert alert-warning"><code class="small">
			BUILD FAILED<br/>C:\NVPACK\android-sdk-windows\tools\ant\build.xml:542: Unable to resolve project target 'android-14'
			</code></div>
			<p>Can be solved as follows:</p>
			<ol>
				<li>Run <code>{NVPACK}/android-sdk-windows/SDKManager.exe</code></li>
				<li>Click <b>deselect all</b>.</li>
				<li>Find <b>Android 4.0 (API14)</b>.</li>
				<li>Check <b>SDK Platform</b>.</li>
				<li>Click <b>Install packages</b>.</li>
				<li>Follow the steps to accept the license and install the package</li>
			</ol>
		</li>
		<li><p>The error:</p>
			<div class="alert alert-warning"><code class="small">
			[dx] Could not create the Java virtual machine.<br/>
			[dx] Error occurred during initialization of VM<br/>
			[dx] Could not reserve enough space for object heap
			</code></div>
			<p>Can be fixed as follows:</p>
			<ol>
				<li>Edit <code>{NVPACK}\android-sdk-windows\build-tools\{each version}\dx.bat</code>.</li>
				<li>Find the line:<br/><code>set defaultMx=-Xmx1024M</code><br/>And change the 1024 to 512, like:<br/><code>set defaultMx=-Xmx512M</code>.</li>
				<li>Save and exit.</li>
				<li>Restart Visual Studio.</li>
				<li>Rebuild.</li>
			</ol>
		</li>
	</ul>

	<h2>Installing and Building on/for Linux x86_64 Host/Target</h2>
	<p>This section will walk you through the setup of the OpenGL and Vulkan samples on a Linux development PC.</p>
	<ol>
		<li>Install the Linux build/target pre-requisites by running:<br/>
			<code>sudo apt-get install g++ xorg-dev libglu1-mesa-dev make</code>
		</li>
		<li>If using Ubuntu 12.04 LTS, building the Vulkan samples requires g++ 4.8:<br/>
			<code>sudo apt-get install python-software-properties</code><br />
			<code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test</code><br />
			<code>sudo apt-get update</code><br />
			<code>sudo apt-get install gcc-4.8</code><br />
			<code>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50</code><br />
			<code>sudo apt-get install g++-4.8</code><br />
			<code>sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50</code><br />
		</li>
		<li>If you haven't already done so, download and install the <a href="https://lunarg.com/vulkan-sdk/">LunarG Vulkan SDK</a>.  Ensure that the installer has set <code>VK_SDK_PATH</code> to the path to the SDK, and restart any Visual Studio instances. See the <a href="gfx_prereq.htm">Prerequisites</a> guide for recommended min SDK version.</li>
        <li>Ensure that the environment variable <code>VK_SDK_PATH</code> is exported and points to the <code>x86_64</code> subdirectory of the LunarG SDK root (i.e. <code>include</code> should be an immediate subdirectory of env var path.) See the <a href="gfx_prereq.htm">Prerequisites</a> guide for recommended min SDK version.</li>
        <li>Ensure that the <code>LD_LIBRARY_PATH</code> variable includes the LunarG SDK's loader path: <code>$VK_SDK_PATH/lib</code>.</li>
		<li>Pull the samples pack to a directory on the Linux Host PC.  We will call this directory <code>SAMPLES_ROOT</code>.</li>
		<li>Open a terminal window to <code>{SAMPLES_ROOT}/samples/build/linux64</code>.</li>
		<li>Run <code>make</code>.</li>
		<li>The resulting apps will be placed in <code>{SAMPLES_ROOT}/samples/bin/linux64/</code>.  Note that as per the <a href="gfx_prereq.htm">Prerequisites</a> guide, the system must have working OpenGL drivers for the samples to run.</li>
	    <li>Individual samples may be built via <code>make build_[sample]_[debug, release]</code></li>
    </ol>

	<h2>Installing and Building on Linux x86_64 Host for Android Target</h2>
	<p>This section will walk you through the setup of the OpenGL and Vulkan samples on a Linux development PC to run on an Android device.</p>
	<ol>
		<li>Install the Linux build/target pre-requisites by running:<br/>
			<code>sudo apt-get install g++ xorg-dev libglu1-mesa-dev make</code><br />
			Full <a href="https://developer.nvidia.com/codeworks-android">CodeWorks for Android</a> 1r4 for Linux x64 tools install.  Note that means that NDK r11/r12 are not yet supported.  CodeWorks 1r4 supports r10e.<br/>
		</li>
		<li>If you haven't already done so, download and install the <a href="https://lunarg.com/vulkan-sdk/">LunarG Vulkan SDK</a>.  Ensure that the installer has set <code>VK_SDK_PATH</code> to the path to the SDK, and restart any Visual Studio instances. See the <a href="gfx_prereq.htm">Prerequisites</a> guide for recommended min SDK version.</li>
        <li>Ensure that the environment variable <code>VK_SDK_PATH</code> is exported and points to the <code>x86_64</code> subdirectory of the LunarG SDK root (i.e. <code>include</code> should be an immediate subdirectory of env var path.) See the <a href="gfx_prereq.htm">Prerequisites</a> guide for recommended min SDK version.</li>
        <li>Install dos2unix and OpenJDK 8 and ensure that JAVA_HOME is set<br/>
            <code>sudo apt-get install dos2unix</code><br />
            <code>sudo apt-get install openjdk-8-jdk</code><br />
            Use export in a shell to ensure that <code>JAVA_HOME</code> is set to OpenJDK 8, likely <code>/usr/lib/jvm/java-8-openjdk-amd64</code>.  If it is not set, then set it in a recurring setup file like <code>.bashrc</code><br/>
            If you do not ensure that OpenJDK 8 is installed and the <code>JAVA_HOME</code> is set, the Ant/Java builds will likely fail with:<br/>
            <code>Error: JAVA_HOME is not defined correctly.</code><br />
            <code>We cannot execute /usr/bin/java</code><br />
        </li>
		<li>If using Ubuntu 12.04 LTS, building the Vulkan samples requires g++ 4.8:<br/>
			<code>sudo apt-get install python-software-properties</code><br />
			<code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test</code><br />
			<code>sudo apt-get update</code><br />
			<code>sudo apt-get install gcc-4.8</code><br />
			<code>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50</code><br />
			<code>sudo apt-get install g++-4.8</code><br />
			<code>sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50</code><br />
		</li>
		<li>Pull the samples pack to a directory on the Linux Host PC.  We will call this directory <code>SAMPLES_ROOT</code>.</li>
		<li>Open a terminal window to <code>{SAMPLES_ROOT}/samples/build/makeandroid</code>.</li>
		<li>Run <code>make</code>.</li>
		<li>The resulting apps will be placed in each sample's <code>{SAMPLES_ROOT}/samples/[sampletype]/[samplename]/bin/</code>.</li>
	    <li>Individual samples may be built via <code>make build_[sample]_[debug, release]</code></li>
    </ol>

   <h2>Installing and Building for Tegra Ubuntu (Jetson TX1)</h2>
   <p>The samples can be compiled locally on the device, or cross-compiled from an x86_64 Ubuntu desktop.</p>
   <ol>
     <li>Pull the samples pack to a directory on the Ubuntu desktop or Jetson TX1.  We will call this directory <code>SAMPLES_ROOT</code>.</li>
     <li>Install the Linux target pre-requisites onto the build host:<br/>
        <code>sudo apt-get update</code>(this is critical, or else the next line will do nothing)<br/>
    	<code>sudo apt-get install g++ xorg-dev libglu1-mesa-dev make</code>
     </li>
     <li>If cross-compiling from an x86_64 Ubuntu desktop, install the cross-compiler onto the build host:<br/>
    	<code>sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu</code>
     </li>
     <li>On the build host, open a terminal window to <code>{SAMPLES_ROOT}/samples/build/linux-aarch64</code>, depending on the host PC.</li>
     <li>Run <code>make</code>.</li>
     <li>The resulting apps will be placed in <code>{SAMPLES_ROOT}/samples/bin/linux-aarch64/</code></li>
     <li>Individual samples may be built via <code>make build_[sample]_[debug, release]</code></li>
     <li>If the vulkan loader is not pre-installed on the target platform (Jetson TX1), it can be downloaded from the <a href="https://developer.nvidia.com/embedded/linux-tegra">NVIDIA Embedded Developer Site</a>. Also, the samples pack contains a pre-built loader.  It can be installed by adding the path: <code>{SAMPLES_ROOT}/extensions/externals/lib/linux-aarch64</code> ti <code>LD_LIBRARY_PATH</code> variable.</li>
     <li>If you haven't already done so, download and install the <a href="https://lunarg.com/vulkan-sdk/">LunarG Vulkan SDK</a>.  Ensure that the installer has set <code>VK_SDK_PATH</code> is exported and points to the <code>x86_64</code> subdirectory of the LunarG SDK root (i.e. <code>include</code> should be an immediate subdirectory of env var path.). See the <a href="gfx_prereq.htm">Prerequisites</a> guide for recommended min SDK version.</li>
   </ol>
	

 </div> <!--col-md-8-->
 <div class="col-md-4"></div>
</div> <!--row-->

</div> <!--content-->
<!-- footer block-->
<div id="footer" class="container">
	<div class="seperator"></div>
	<div class="seperator"></div>
	<footer>
		<div class="row">
			<div class="text-center">&copy;2016 NVIDIA Corporation.</div>
			<div class="seperator"></div>
		</div>
	</footer>
</div> <!--footer-->

</body>
</html>